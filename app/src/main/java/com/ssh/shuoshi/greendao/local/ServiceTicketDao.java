package com.ssh.shuoshi.greendao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ssh.shuoshi.greendao.ServiceTicket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVICE_TICKET".
*/
public class ServiceTicketDao extends AbstractDao<ServiceTicket, String> {

    public static final String TABLENAME = "SERVICE_TICKET";

    /**
     * Properties of entity ServiceTicket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderNo = new Property(0, String.class, "orderNo", true, "ORDER_NO");
        public final static Property Photos = new Property(1, String.class, "photos", false, "PHOTOS");
        public final static Property OrderType = new Property(2, int.class, "orderType", false, "ORDER_TYPE");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
    }


    public ServiceTicketDao(DaoConfig config) {
        super(config);
    }
    
    public ServiceTicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_TICKET\" (" + //
                "\"ORDER_NO\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderNo
                "\"PHOTOS\" TEXT," + // 1: photos
                "\"ORDER_TYPE\" INTEGER NOT NULL ," + // 2: orderType
                "\"REMARK\" TEXT);"); // 3: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_TICKET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServiceTicket entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(2, photos);
        }
        stmt.bindLong(3, entity.getOrderType());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServiceTicket entity) {
        stmt.clearBindings();
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(1, orderNo);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(2, photos);
        }
        stmt.bindLong(3, entity.getOrderType());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ServiceTicket readEntity(Cursor cursor, int offset) {
        ServiceTicket entity = new ServiceTicket( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photos
            cursor.getInt(offset + 2), // orderType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ServiceTicket entity, int offset) {
        entity.setOrderNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhotos(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderType(cursor.getInt(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ServiceTicket entity, long rowId) {
        return entity.getOrderNo();
    }
    
    @Override
    public String getKey(ServiceTicket entity) {
        if(entity != null) {
            return entity.getOrderNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ServiceTicket entity) {
        return entity.getOrderNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
